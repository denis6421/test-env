{"version":3,"sources":["config/env.dev.ts","config/env.prod.ts","config/env.ts","i18n/i18n.ts","serviceWorker.ts","store/reducers/auth.ts","store/reducers/wallet.ts","services/web3/index.ts","store/reducers/block.ts","store/index.ts","config/web3.ts","hooks/useWallet.ts","hooks/useBlockData.ts","components/Navbar/index.tsx","App.tsx","AppWrapper/useLogic.ts","AppWrapper/AppWrapper.tsx","index.tsx"],"names":["ENV","development","process","env","NODE_ENV","isDev","require","resources","en","translation","fr","i18n","use","initReactI18next","LanguageDetector","init","supportedLngs","fallbackLng","keySeparator","interpolation","escapeValue","debug","Boolean","window","location","hostname","match","AuthSlice","createSlice","name","initialState","value","loggedIn","reducers","login","state","logout","decrement","incrementByAmount","action","payload","actions","address","undefined","provider","balance","WalletSlice","setAddress","setProvider","onConnect","onDisconnect","setData","data","setBalance","web3Service","web3","ethereum","this","Web3","infuraProvider","providers","HttpProvider","error","console","log","eth","getBalance","res","utils","fromWei","getAccounts","accounts","signData","account","personal","sign","then","catch","getBlock","defaultBlock","result","number","latestBlock","interval","BlockSlice","setLatestBlock","setDataInterval","clearDataInterval","clearInterval","store","configureStore","reducer","auth","authReducer","wallet","walletReducer","block","blockReducer","middleware","getDefaultMiddleware","serializableCheck","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","network","cacheProvider","useWallet","useSelector","dispatch","useDispatch","disconnect","useCallback","a","clearCachedProvider","createDefaultWeb3","connect","providerInstance","setWeb3","getAddress","addr","accountBalance","useBlockData","Navbar","type","onClick","App","className","setInterval","getLatestBlock","useLogic","useEffect","cachedProvider","func","on","handleAccountsChanged","reload","handleChainChanged","_hexChainId","handleDisconnect","removeListener","AppWrapper","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4d1c9967.chunk.js","sourcesContent":["export const ENV = {};\n","export const ENV = {};\n","import process from 'process';\n\nconst development: boolean = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n\nexport default function isDev(): boolean {\n    return development;\n}\nconst ENV = isDev() ? require('./env.dev') : require('./env.prod');\n\nexport { ENV };\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport isDev from '../config/env';\n\nconst en = require('./en');\nconst fr = require('./fr');\n\nconst resources = {\n    en: {\n        translation: en\n    },\n    fr: {\n        translation: fr\n    }\n};\n\ni18n.use(initReactI18next)\n    .use(LanguageDetector)\n    .init({\n        resources,\n        supportedLngs: ['en', 'fr'],\n        fallbackLng: 'en',\n        keySeparator: '.',\n        interpolation: {\n            escapeValue: false\n        },\n        debug: isDev()\n    });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface State {\n    value: number;\n    loggedIn: boolean;\n}\n\nconst initialState = { value: 0, loggedIn: false } as State;\n\nconst AuthSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        login(state) {\n            state.loggedIn = true;\n        },\n        logout(state) {\n            state.loggedIn = false;\n        },\n        decrement(state) {\n            state.value -= 1;\n        },\n        incrementByAmount(state, action: PayloadAction<number>) {\n            state.value += action.payload;\n        }\n    }\n});\n\nexport const { login, logout, decrement, incrementByAmount } = AuthSlice.actions;\nexport default AuthSlice.reducer;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { createSlice, Dispatch, PayloadAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\ninterface State {\n    address: string | undefined;\n    provider: any;\n    data: any;\n    balance: string | undefined;\n}\n\nconst initialState = {\n    address: undefined,\n    provider: null,\n    balance: undefined\n} as State;\n\nconst WalletSlice = createSlice({\n    name: 'wallet',\n    initialState,\n    reducers: {\n        setAddress(state, action: PayloadAction<string | undefined>) {\n            state.address = action.payload;\n        },\n        setProvider(state, action: PayloadAction<any>) {\n            state.provider = action.payload;\n        },\n        onConnect(state, action: PayloadAction<{ provider: any; address?: string; balance?: string }>) {\n            const { provider, address, balance } = action.payload;\n            state.provider = provider;\n            state.address = address;\n            state.balance = balance;\n        },\n        onDisconnect(state) {\n            state.provider = null;\n            state.address = undefined;\n            state.balance = undefined;\n        },\n        setData(state, action: PayloadAction<any>) {\n            state.data = action.payload;\n        },\n        setBalance(state, action: PayloadAction<string | undefined>) {\n            state.balance = action.payload;\n        }\n    }\n});\n\nexport const { setAddress, setProvider, onConnect, onDisconnect, setData, setBalance } = WalletSlice.actions;\n\nconst getSomeItems = () => async (dispatch: Dispatch) => {\n    const res = await axios.get('https://jsonplaceholder.typicode.com/todos');\n    dispatch(setData(res.data));\n};\n\nexport { getSomeItems };\n\nexport default WalletSlice.reducer;\n","/* eslint-disable consistent-return */\nimport Web3 from 'web3';\n\nclass Web3Service {\n    web3: Web3 | undefined;\n\n    provider: any;\n\n    createDefaultWeb3() {\n        try {\n            if ((window as any).ethereum) {\n                this.web3 = new Web3((window as any).ethereum);\n                this.provider = (window as any).ethereum;\n            } else if (process.env.REACT_APP_INFURA_ID) {\n                const infuraProvider = new Web3.providers.HttpProvider(process.env.REACT_APP_INFURA_ID);\n                this.web3 = new Web3(infuraProvider);\n                this.provider = infuraProvider;\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    setWeb3(provider: any) {\n        this.provider = provider;\n        this.web3 = new Web3(provider);\n    }\n\n    async getBalance(address?: string): Promise<string | undefined> {\n        if (!address || !this.web3) {\n            return;\n        }\n        try {\n            const res = await this.web3.eth.getBalance(address);\n            return this.web3.utils.fromWei(res);\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    async getAddress(): Promise<string | undefined> {\n        if (!this.web3) {\n            return;\n        }\n        try {\n            const accounts = await this.web3.eth.getAccounts();\n            return accounts[0];\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    async sign(signData: string, account?: string) {\n        if (!account || !this.web3) {\n            return;\n        }\n        return this.web3.eth.personal\n            .sign(signData || 'data', account, '')\n            .then((res) => {\n                return res;\n            })\n            .catch(() => {\n                console.log('error');\n                return null;\n            });\n    }\n\n    async getLatestBlock() {\n        try {\n            const result = await this.web3?.eth.getBlock(this.web3.eth.defaultBlock);\n            return result?.number;\n        } catch (error) {\n            return 0;\n        }\n    }\n}\nconst web3Service = new Web3Service();\nexport default web3Service;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { createSlice, Dispatch, PayloadAction } from '@reduxjs/toolkit';\nimport web3Service from '../../services/web3';\n\ninterface State {\n    latestBlock: number;\n    interval: any;\n}\n\nconst initialState = {\n    latestBlock: 0,\n    interval: undefined\n} as State;\n\nconst BlockSlice = createSlice({\n    name: 'block',\n    initialState,\n    reducers: {\n        setLatestBlock(state, action: PayloadAction<number>) {\n            state.latestBlock = action.payload;\n        },\n        setDataInterval(state, action: PayloadAction<any>) {\n            state.interval = action.payload;\n        },\n        clearDataInterval(state, action: PayloadAction<any>) {\n            clearInterval(state.interval);\n            state.interval = action.payload;\n        }\n    }\n});\n\nexport const { setLatestBlock, setDataInterval, clearDataInterval } = BlockSlice.actions;\n\nconst startBlockReadInterval = () => (dispatch: Dispatch) => {\n    const interval = setInterval(async () => {\n        console.log('interval');\n        const res = await web3Service.getLatestBlock();\n        dispatch(setLatestBlock(res || 0));\n    }, 1000);\n    dispatch(setDataInterval(interval));\n};\n\nexport { startBlockReadInterval };\n\nexport default BlockSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from './reducers/auth';\nimport walletReducer from './reducers/wallet';\nimport blockReducer from './reducers/block';\n\nconst store = configureStore({\n    reducer: {\n        auth: authReducer,\n        wallet: walletReducer,\n        block: blockReducer\n    },\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware({\n            serializableCheck: false\n        })\n});\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport default store;\n","import Web3Modal from 'web3modal';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\n\n\nconst providerOptions = {\n    walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n            infuraId: process.env.REACT_APP_INFURA_ID\n        }\n    }\n};\n\nconst web3Modal = new Web3Modal({\n    network: 'mainnet', // optional\n    cacheProvider: true, // optional\n    providerOptions // required\n});\n\nexport type Connector = Web3Modal;\nexport { web3Modal };\n","import { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { web3Modal } from '../config/web3';\nimport web3Service from '../services/web3';\nimport { RootState } from '../store';\nimport { onConnect, onDisconnect } from '../store/reducers/wallet';\n\nfunction useWallet() {\n    const { address, provider, balance } = useSelector((state: RootState) => state.wallet);\n    const dispatch = useDispatch();\n\n    const disconnect = useCallback(async () => {\n        try {\n            await web3Modal.clearCachedProvider();\n            if (web3Service.provider?.disconnect && typeof web3Service.provider.disconnect === 'function') {\n                await web3Service.provider.disconnect();\n            }\n            dispatch(onDisconnect());\n            web3Service.createDefaultWeb3();\n        } catch (error) {\n            console.log(error);\n        }\n    }, [dispatch]);\n\n    const connect = useCallback(async () => {\n        try {\n            const providerInstance = await web3Modal.connect();\n            if (!providerInstance) {\n                return;\n            }\n\n            web3Service.setWeb3(providerInstance);\n            const addr = await web3Service.getAddress();\n            const accountBalance = await web3Service.getBalance(addr);\n            dispatch(\n                onConnect({\n                    provider: providerInstance,\n                    address: addr,\n                    balance: accountBalance\n                })\n            );\n        } catch (error) {\n            console.log(error);\n        }\n    }, [dispatch]);\n\n    return { address, connect, disconnect, provider, balance };\n}\n\nexport default useWallet;\n","import { useSelector } from 'react-redux';\nimport { RootState } from '../store/index';\n\nfunction useBlockData() {\n    const { latestBlock } = useSelector((state: RootState) => state.block);\n\n    return { latestBlock };\n}\n\nexport default useBlockData;\n","import React from 'react';\nimport useBlockData from '../../hooks/useBlockData';\nimport useWallet from '../../hooks/useWallet';\nimport web3Service from '../../services/web3';\n\nfunction Navbar() {\n    const { balance, address } = useWallet();\n    const { latestBlock } = useBlockData();\n\n    return (\n        <div>\n            <p>Latest block: {latestBlock}</p>\n            <p>Balance: {balance}</p>\n            <button type=\"button\" onClick={() => web3Service?.sign('some data', address)}>\n                Sign\n            </button>\n        </div>\n    );\n}\n\nexport default Navbar;\n","import React, { FunctionComponent as Component } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useWallet from './hooks/useWallet';\nimport Navbar from './components/Navbar';\nimport { clearDataInterval, startBlockReadInterval } from './store/reducers/block';\nconst App: Component = () => {\n    const { address, connect, disconnect } = useWallet();\n    const dispatch = useDispatch();\n\n    const stopInterval = () => {\n        dispatch(clearDataInterval(undefined));\n    };\n    const statInterval = () => {\n        dispatch(startBlockReadInterval());\n    };\n    return (\n        <div className=\"App\">\n            <Navbar />\n            <div>\n                <button type=\"button\" onClick={stopInterval}>\n                    Stop interval\n                </button>\n                <button type=\"button\" onClick={statInterval}>\n                    Start interval\n                </button>\n                <p>{address}</p>\n                {!address && (\n                    <button type=\"button\" onClick={connect}>\n                        Connect\n                    </button>\n                )}\n                {address && (\n                    <button type=\"button\" onClick={disconnect}>\n                        Disconnect\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import { useEffect } from 'react';\nimport { web3Modal } from '../config/web3';\nimport useWallet from '../hooks/useWallet';\nimport web3Service from '../services/web3';\n\nfunction useLogic() {\n    const { connect, disconnect, provider } = useWallet();\n    useEffect(() => {\n        const func = async () => {\n            if (web3Modal.cachedProvider) {\n                await connect();\n            } else {\n                web3Service.createDefaultWeb3();\n            }\n            //dispatch(startBlockReadInterval());\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        };\n        func();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (provider?.on) {\n            const handleAccountsChanged = () => {\n                window.location.reload();\n            };\n\n            // https://docs.ethers.io/v5/concepts/best-practices/#best-practices--network-changes\n            const handleChainChanged = (_hexChainId: string) => {\n                window.location.reload();\n            };\n\n            const handleDisconnect = (error: { code: number; message: string }) => {\n                disconnect();\n            };\n\n            provider.on('accountsChanged', handleAccountsChanged);\n            provider.on('chainChanged', handleChainChanged);\n            provider.on('disconnect', handleDisconnect);\n            return () => {\n                if (provider.removeListener) {\n                    provider.removeListener('accountsChanged', handleAccountsChanged);\n                    provider.removeListener('chainChanged', handleChainChanged);\n                    provider.removeListener('disconnect', handleDisconnect);\n                }\n            };\n        }\n    }, [provider, disconnect]);\n}\n\nexport default useLogic;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from '../App';\nimport useLogic from './useLogic';\n\nfunction AppWrapper() {\n    useLogic();\n    return (\n        <Router>\n            <App />\n        </Router>\n    );\n}\n\nexport default AppWrapper;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './i18n';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport AppWrapper from './AppWrapper/AppWrapper';\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <AppWrapper />\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}